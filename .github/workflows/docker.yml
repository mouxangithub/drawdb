name: Docker 构建与发布

on:
  push:
    tags:
      - "*"
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: '版本标签 (如不指定则使用latest)'
        required: false
        default: 'latest'

concurrency:
  group: "docker-image"
  cancel-in-progress: false

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 QEMU
      uses: docker/setup-qemu-action@v3

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 缓存 Docker 层
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: 登录 GitHub 容器注册表
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' && github.event.inputs.version == 'latest' }}
          type=raw,value=${{ github.event.inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version != 'latest' }}

    - name: 构建并推送 Docker 镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    # 临时修复缓存大小增长问题 (https://github.com/docker/build-push-action/issues/252)
    - name: 移动缓存
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: 创建 GitHub 发布版本
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: drawDB ${{ github.ref_name }}
        body: |
          ## drawDB 版本 ${{ github.ref_name }}
          
          Docker 镜像已发布到 GitHub Container Registry
          
          ### 使用方法：
          
          ```bash
          # 简单运行（注意：数据将存储在容器中，容器删除后数据会丢失）
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          docker run -p 3000:3000 ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          
          # 推荐：使用数据卷挂载以保持数据持久化
          mkdir -p ./database ./backups
          docker run -p 3000:3000 \
            -v ./database:/app/server/database \
            -v ./backups:/app/backups \
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```
          
          ### 使用 Docker Compose（推荐）：
          
          ```yaml
          services:
            drawdb:
              image: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
              container_name: drawdb
              restart: unless-stopped
              ports:
                - "3000:3000"
              volumes:
                - ./database:/app/server/database  # 数据库持久化
                - ./backups:/app/backups           # 备份文件存储
              environment:
                - PORT=3000
                - NODE_ENV=production
                - DB_STORAGE=server/database/drawdb.sqlite
          ```
          
          ### 重要提示：
          镜像中不包含SQLite数据库文件。请确保通过数据卷挂载提供持久化存储。
          数据库文件将在首次运行时自动创建。
          
          查看详细说明: https://github.com/${{ github.repository }}#docker构建

